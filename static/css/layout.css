/* margin */
.m0 {margin: 0px;}

/* margin top */
.mt2 {margin-top: 2px;}
.mt5 {margin-top: 5px;}
.mt7 {margin-top: 7px;}
.mt10 {margin-top: 10px;}
.mt12 {margin-top: 12px;}
.mt15 {margin-top: 15px;}
.mt20 {margin-top: 20px;}
.mt25 {margin-top: 25px;}
.mt30 {margin-top: 30px;}
.mt35 {margin-top: 35px;}
.mt40 {margin-top: 40px;}
.mt45 {margin-top: 45px;}
.mt50 {margin-top: 50px;}
.mt60 {margin-top: 60px;}
.mt65 {margin-top: 65px;}
.mt70 {margin-top: 70px;}
.mt80 {margin-top: 80px;}
.mt100 {margin-top: 100px;}
.mt180 {margin-top: 180px;}

/* margin left */
.ml5 {margin-left: 5px;}
.ml10 {margin-left: 10px;}
.ml12 {margin-left: 12px;}
.ml15 {margin-left: 15px;}
.ml20 {margin-left: 20px;}
.ml22 {margin-left: 22px;}
.ml29 {margin-left: 29px;}
.ml30 {margin-left: 30px;}
.ml50 {margin-left: 50px;}
.ml36 {margin-left: 36px;}
.ml116 {margin-left: 116px;}
.ml160 {margin-left: 160px;}
.ml131 {margin-left: 131px;}
.ml200 {margin-left: 200px;}

/* margin right */
.mr10 {margin-right: 10px;}
.mr12 {margin-right: 12px;}
.mr20 {margin-right: 20px;}
.mr30 {margin-right: 30px;}
.mr36 {margin-right: 36px;}
.mr37 {margin-right: 37px;}
.mr40 {margin-right: 40px;}
.mr50 {margin-right: 50px;}
.mr118 {margin-right: 118px;}
.mr114 {margin-right: 114.5px;}
.mr190 {margin-right: 190px;}

/* margin bottom */
.mb5 {margin-bottom: 5px;}
.mb10 {margin-bottom: 10px;}
.mb12 {margin-bottom: 12px;}
.mb15 {margin-bottom: 15px;}
.mb20 {margin-bottom: 20px;}
.mb25 {margin-bottom: 25px;}
.mb27 {margin-bottom: 27px;}
.mb30 {margin-bottom: 30px;}
.mb35 {margin-bottom: 35px;}
.mb40 {margin-bottom: 40px;}
.mb50 {margin-bottom: 50px;}
.mb60 {margin-bottom: 60px;}
.mb100 {margin-bottom: 100px;}

/* padding */
.p0 {padding: 0px;}
.p5 {padding: 5px;}
.p10 {padding: 10px;}
.p12 {padding: 12px;}
.p20 {padding: 20px;}
.p25 {padding: 25px;}
.p30 {padding: 30px;}
.p40 {padding: 40px;}
.p45 {padding: 45px;}
.p50 {padding: 50px;}
.p70 {padding: 70px;}

/* padding bottom */
.pb20 {padding-bottom: 20px;}
.pb50 {padding-bottom: 50px;}

/* padding left */
.pl20 {padding-left: 20px;}
.pl30 {padding-left: 30px;}
.pl50 {padding-left: 50px;}
.pl45 {padding-left: 45px;}
.pl60 {padding-left: 60px;}
.pl200 {padding-left: 200px;}

/* padding right */
.pr20 {padding-right: 20px;}
.pr30 {padding-right: 30px;}
.pr50 {padding-right: 50px;}
.pr45 {padding-right: 45px;}
.pr60 {padding-right: 60px;}

/* padding top */
.pt5  {padding-top: 5px;}
.pt15 {padding-top: 15px;}
.pt20 {padding-top: 20px;}
.pt30 {padding-top: 30px;}
.pt45 {padding-top: 45px;}
.pt100 {padding-top: 100px;}
 
/* padding bottom */
.pb15 {padding-bottom: 15px;}

.fixed { position: fixed;}
.absolute { position: absolute; }
.relative { position: relative; }
.static { position: static; }

.top { top: 0; }
.right { right: 0; }
.left { left: 0; }
.bottom { bottom: 0; }

.pullRight {
  margin-left:auto;
}

.fullHeight {
  height: 100%;
}
.fullWidth {
  width: 100%;
}

.z-neg1 { z-index: -1; }
.z0 { z-index: 0; }
.z1 { z-index: 1; }
.z2 { z-index: 2; }
.z3 { z-index: 3; }
.z4 { z-index: 4; }
.z5 { z-index: 5; }

.inline-block {
  display: inline-block;
}
/**
  * Set auto margins on left and right. This pattern is useful for horizontally centering block elements.
  *
  * @example
  * <div class='mx-auto w60 bg-darken10'>mx-auto</div>
  * @memberof Margins
  */
.mx-auto { margin-left: auto; margin-right: auto; }

/**
  * Flexbox utilities. All class sets include *-mm, *-ml, and *-mxl variations to target screen sizes.
  *
  * Usage must fit the following pattern:
  * - flex-parent rules control the parent container, while flex-child rules control the children.
  * - By default, the main axis is horizontal and the cross axis is vertical. The axes can be inverted with the use of flex-parent--column.
  * - To learn about how the flexbox system works, check out ["A Complete Guide to Flexbox"](https://css-tricks.com/snippets/css/a-guide-to-flexbox).
  *
  * @section Flexbox
  * @memberof Layout
  */

/**
  * Establish an element as a flex parent.
  * These classes allow the use of flex-parent--* modifiers, and flex-child classes on children.
  *
  * @group
  * @memberof Flexbox
  * @example
  * <div class='bg-darken10 flex-parent'>flex-parent</div>
  * <div class='bg-darken10 flex-parent-inline'>flex-parent-inline</div>
  */
.flex-parent { display: flex; }
.flex-parent-inline { display: inline-flex; }
/** @endgroup */

/**
  * Set the direction of the main axis to top-to-bottom (default is left-to-right).
  *
  * @memberof Flexbox
  * @example
  * <div class='bg-darken10 flex-parent flex-parent--column'>
  *  <span class='flex-child'>1</span>
  *  <span class='flex-child'>2</span>
  *  <span class='flex-child'>3</span>
  * </div>
  */
.flex-parent--column { flex-direction: column; }

/**
  * Set the direction of the main axis to bottom-to-top (default is left-to-right).
  *
  * @memberof Flexbox
  * @example
  * <div class='bg-darken10 flex-parent flex-parent--column-reverse'>
  *  <span class='flex-child'>1</span>
  *  <span class='flex-child'>2</span>
  *  <span class='flex-child'>3</span>
  * </div>
  */
.flex-parent--column-reverse { flex-direction: column-reverse; }

/**
  * Set the direction of the main axis to left-to-right (the default value of flex-parent).
  *
  * @memberof Flexbox
  * @example
  * <div class='bg-darken10 flex-parent flex-parent--row'>
  *  <span class='flex-child'>1</span>
  *  <span class='flex-child'>2</span>
  *  <span class='flex-child'>3</span>
  * </div>
  */
.flex-parent--row { flex-direction: row; }

/**
  * Set the direction of the main axis to right-to-left (default is left-to-right).
  *
  * @memberof Flexbox
  * @example
  * <div class='bg-darken10 flex-parent flex-parent--row-reverse'>
  *  <span class='flex-child'>1</span>
  *  <span class='flex-child'>2</span>
  *  <span class='flex-child'>3</span>
  * </div>
  */
.flex-parent--row-reverse { flex-direction: row-reverse; }

/**
  * Center an element's children on the main axis.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--center-main bg-darken10'>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--center-main { justify-content: center; }

/**
  * Center an element's children on the cross axis.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--center-cross bg-darken10 h120'>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--center-cross { align-items: center; }

/**
  * Align an element's children to the start of the cross axis.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--start-cross h120 bg-darken10'>
  *  <div class='flex-child bg-darken10 h42'>child</div>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--start-cross { align-items: flex-start; }

/**
  * Align an element's children to the start of the main axis.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--start-main bg-darken10'>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--start-main { justify-content: flex-start; }

/**
  * Align an element's children to the end of the cross axis.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--end-cross h120 bg-darken10'>
  *  <div class='flex-child bg-darken10 h42'>child</div>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--end-cross { align-items: flex-end; }

/**
  * Align an element's children to the end of the main axis.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--end-main bg-darken10'>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--end-main { justify-content: flex-end; }

/**
  * Allow children to wrap. By default, they are all forced onto one line.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--wrap bg-darken10 clip'>
  *  <div class='flex-child bg-darken10 w600'>child</div>
  *  <div class='flex-child bg-darken10 w600'>child</div>
  * </div>
  */
.flex-parent--wrap { flex-wrap: wrap; }

/**
  * Stretch children to fill the parent container along the cross axis.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--stretch-cross bg-darken10 h120'>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--stretch-cross { align-items: stretch; }

/**
  * Evenly distribute children across the line, so first child is at the start
  * and last child is at the end.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--space-between-main bg-darken10 h120'>
  *  <div class='flex-child bg-darken10'>child</div>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--space-between-main { justify-content: space-between; }

/**
  * Establish an element as a flex child. This class mainly exists to anticipate certain bugs
  * and unexpected behaviors that can otherwise occur with flexbox (especially in IE).
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--center-main'>
  *   <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-child {
  display: block;
  max-width: 100%;
}
/* Specifically, the above addresses #1, #2, and #12 in https://github.com/philipwalton/flexbugs */

/**
  * Make a child to grow to fill whatever space is available in the main axis of the parent container.
  * This is useful when you have one or more elements of
  * fixed width, and another element that should take up the remaining space in the row.
  *
  * Typically, you will also want to apply the flex-child--no-shrink modifier to the element in the row with a fixed width.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent bg-darken10'>
  *  <div class='flex-child flex-child--no-shrink border w240'>child</div>
  *  <div class='flex-child flex-child--grow border'>child</div>
  * </div>
  */
.flex-child--grow {
  flex-grow: 1;
  min-width: 0;
}

/**
  * Prevent a child from shrinking below its width value.
  *
  * By default, flex children (even with specified widths) will shrink as needed to accommodate sibling elements.
  * This class prevents that default shrinkage, forcing siblings to accommodate the parent's width.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent bg-darken10 w240'>
  *  <div class='flex-child flex-child--no-shrink border w120'>child</div>
  *  <div class='flex-child border w120'>child</div>
  *  <div class='flex-child border w120'>child</div>
  * </div>
  */
.flex-child--no-shrink {
  flex-shrink: 0;
}

/* end flex */

/**
  * Extra layout utilities.
  *
  * @memberof Layout
  * @section Layout utils
  */

/**
  * Bleed utilities. Bleed classes allow an element inside a centered container to escape the container and meet the edge of the screen.
  * When using the bleed classes, consider adding the .clip class on a parent element to prevent horizontal overflow.
  *
  * *Warning*: Bleeding elements will never bleed out to more than 50% of the viewport width.
  * So you should not make an element bleed to one side unless it's already on that half of
  * the screen.
  *
  * *Warning*: In Firefox, children with negative margins have different layout effects than in other browsers.
  * The bleed classes should only be used if the parent's width is stable, either because it is set or because other children determine it.
  *
  * Class set (except clearfix) includes *-mm, *-ml, and *-mxl variations to target screen sizes.
  * These screen-size variants are best suited to *adding* the bleed, not *removing* it.
  * Be aware of the effects of the unbleed class: it resets margin-left, margin-right,
  * and flex-grow.
  *
  * @group
  * @example
  * <div class='bg-darken10 flex-parent flex-parent--center-main clip'>
  *   <div class='w240 px12 py12 bg-darken10'>
  *     <div class='bg-darken10 bleed-r'>Right bleed</div>
  *   </div>
  * </div>
  *
  * @memberof Layout utils
  */
.bleed {
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
}
.bleed-r {
  flex-grow: 1;
  margin-right: calc(50% - 50vw);
}
.bleed-l {
  flex-grow: 1;
  margin-left: calc(50% - 50vw);
}
.unbleed {
  flex-grow: 0;
  margin-left: 0;
  margin-right: 0;
}
/* @endgroup */

/**
  * Float utilities. Class set (except clearfix) includes *-mm, *-ml, and *-mxl variations to target screen sizes.
  *
  * @group
  * @memberof Layout utils
  * @example
  * <div class='clearfix'>
  *   <div class='fl bg-darken10'>left</div>
  * </div>
  * <div> with .clearfix </div>
  * <div class='fr bg-darken10'>right</div>
  * <div class='bg-darken10'> without .clearfix </div>
  * <div class='fl unfloat'>unfloat</div>
  */
.fl { float: left; }
.fr { float: right; }
.unfloat { float: none; }
.clearfix::after {
  content: '';
  display: block;
  clear: both;
}
/** @endgroup */

/** @animations group */
.grow {
  transition: all .2s ease-in-out; 
}
.grow:hover {
  transform: scale(1.1);
}

.spin {
  transition: all .2s ease-in-out; 
}
.spin:hover {
  transform: scale(1.1);
}
/** @endgroup */